openapi: 3.0.3
info:
  title: Java API REST
  description: Documentation de l'API REST Java
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:8080
    description: Serveur de d√©veloppement
  - url: https://java-api-exam-latest.onrender.com/
    description: Serveur de production
paths:
  /:
    get:
      summary: Endpoint de base
      description: Retourne un message de bienvenue
      responses:
        '200':
          description: Message de bienvenue
          content:
            text/plain:
              schema:
                type: string
                example: "Holla depuis le serveur Java API ! üöÄ"
  /api/health:
    get:
      summary: V√©rification de sant√©
      description: V√©rifie que l'API fonctionne correctement
      responses:
        '200':
          description: API en bonne sant√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /api/tickets:
    post:
      summary: Cr√©er un ticket
      description: Cr√©e un nouveau ticket et retourne ses informations
      responses:
        '201':
          description: Ticket cr√©√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
    get:
      summary: Liste des tickets
      description: Retourne la liste de tous les tickets
      responses:
        '200':
          description: Liste des tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
  /api/tickets/call:
    post:
      summary: Appeler un ticket
      description: Change le statut d'un ticket √† "Appel√©"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: integer
              example: 1
      responses:
        '200':
          description: Ticket appel√©
          content:
            text/plain:
              schema:
                type: string
                example: "Ticket appel√©"
        '404':
          description: Ticket non trouv√© ou d√©j√† appel√©
          content:
            text/plain:
              schema:
                type: string
                example: "Ticket non trouv√© ou d√©j√† appel√©"
  /api/tickets/serve:
    post:
      summary: Servir un ticket
      description: Change le statut d'un ticket √† "Servi"
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: integer
              example: 1
      responses:
        '200':
          description: Ticket servi
          content:
            text/plain:
              schema:
                type: string
                example: "Ticket servi"
        '404':
          description: Ticket non trouv√© ou non appel√©
          content:
            text/plain:
              schema:
                type: string
                example: "Ticket non trouv√© ou non appel√©"
components:
  schemas:
    Ticket:
      type: object
      properties:
        ticketNumber:
          type: integer
          example: 1
        status:
          type: string
          example: "WAITING"
        creationDate:
          type: string
          format: date-time
        calledDate:
          type: string
          format: date-time
          nullable: true
        servedDate:
          type: string
          format: date-time
          nullable: true
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Resource not found"
        statusCode:
          type: integer
          example: 404
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time