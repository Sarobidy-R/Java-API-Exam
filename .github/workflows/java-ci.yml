name: Java CI

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  IMAGE_FRONTEND: ghcr.io/${{ github.repository }}/frontend
  IMAGE_BACKEND: ghcr.io/${{ github.repository }}/backend
  REMOTE_PATH_PROJECT: ${{ vars.REMOTE_PROJECT_PATH }}
  SERVER_USER: ${{ vars.SERVER_USER }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          
      - name: Compile Java project
        run: |
          mkdir -p API/bin
          javac -d API/bin API/src/*.java
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Docker images (Frontend + Backend)
        run: |
          # Build backend
          IMAGE_BACKEND_TAG="${IMAGE_BACKEND}:${{ github.sha }}"
          IMAGE_BACKEND_TAG=$(echo $IMAGE_BACKEND_TAG | tr '[:upper:]' '[:lower:]')
          docker build -f api.Dockerfile -t $IMAGE_BACKEND_TAG .
          
          # Build frontend
          IMAGE_FRONTEND_TAG="${IMAGE_FRONTEND}:${{ github.sha }}"
          IMAGE_FRONTEND_TAG=$(echo $IMAGE_FRONTEND_TAG | tr '[:upper:]' '[:lower:]')
          docker build -f frontend.Dockerfile -t $IMAGE_FRONTEND_TAG .
          
      - name: Push Docker images
        run: |
          IMAGE_BACKEND_TAG="${IMAGE_BACKEND}:${{ github.sha }}"
          IMAGE_FRONTEND_TAG="${IMAGE_FRONTEND}:${{ github.sha }}"
          IMAGE_BACKEND_TAG=$(echo $IMAGE_BACKEND_TAG | tr '[:upper:]' '[:lower:]')
          IMAGE_FRONTEND_TAG=$(echo $IMAGE_FRONTEND_TAG | tr '[:upper:]' '[:lower:]')
          docker push $IMAGE_BACKEND_TAG
          docker push $IMAGE_FRONTEND_TAG

  test-with-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull images and run containers
        run: |
          IMAGE_BACKEND_TAG="${IMAGE_BACKEND}:${{ github.sha }}"
          IMAGE_FRONTEND_TAG="${IMAGE_FRONTEND}:${{ github.sha }}"
          IMAGE_BACKEND_TAG=$(echo $IMAGE_BACKEND_TAG | tr '[:upper:]' '[:lower:]')
          IMAGE_FRONTEND_TAG=$(echo $IMAGE_FRONTEND_TAG | tr '[:upper:]' '[:lower:]')
          
          # Pull images
          docker pull $IMAGE_BACKEND_TAG
          docker pull $IMAGE_FRONTEND_TAG
          
          # Start backend container
          BACKEND_CONTAINER_ID=$(docker run -d --rm -p 8008:8008 $IMAGE_BACKEND_TAG)
          echo "Backend container started: $BACKEND_CONTAINER_ID"
          
          # Start frontend container
          FRONTEND_CONTAINER_ID=$(docker run -d --rm -p 3000:3000 $IMAGE_FRONTEND_TAG)
          echo "Frontend container started: $FRONTEND_CONTAINER_ID"
          
      - name: Test API endpoint
        run: |
          sleep 10 # attendre que les serveurs dÃ©marrent
          curl --fail http://localhost:8008 || (docker logs $(docker ps -q --filter "expose=8008") && exit 1)
          
      - name: Test Frontend endpoint
        run: |
          curl --fail http://localhost:3000 || (docker logs $(docker ps -q --filter "expose=3000") && exit 1)
          
      - name: Stop containers
        if: always()
        run: |
          docker stop $(docker ps -q) || true
    
  deploy-to-server:
    needs: test-with-docker
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' ) && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client gettext-base
          
      - name: Setup SSH and deploy
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.IP_SERVER }} >> ~/.ssh/known_hosts
          
          # Prepare docker-compose with correct tags
          export TAG=${{ github.sha }}
          envsubst '$TAG' < docker-compose.deploy.yml > docker-compose.deploy.rendered.yml
          
          # Copy docker-compose to server
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.deploy.rendered.yml ${{ vars.SERVER_USER }}@${{ secrets.IP_SERVER }}:${{ vars.REMOTE_PROJECT_PATH }}/docker-compose.yml
          
      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ vars.SERVER_USER }}@${{ secrets.IP_SERVER }} << 'EOF'
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io
          cd ${{ vars.REMOTE_PROJECT_PATH }}
          docker compose pull
          docker compose up -d --remove-orphans
          docker system prune -af
          docker volume prune -f
          EOF
